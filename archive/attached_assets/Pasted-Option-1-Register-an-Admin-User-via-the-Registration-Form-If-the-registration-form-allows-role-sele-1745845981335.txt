Option 1: Register an Admin User via the Registration Form
If the registration form allows role selection (as implemented earlier), you can create an admin user through the UI.

Check Registration Form:
Ensure the registration form (templates/register.html) supports role selection. Based on prior discussions, it should look something like this:
text

Copy
<form method="POST" action="{{ url_for('web.register') }}">
    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" name="email" class="form-control" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" name="password" class="form-control" required>
    </div>
    <div class="mb-3">
        <label for="role" class="form-label">Role</label>
        <select name="role" class="form-control">
            <option value="patient">Patient</option>
            <option value="doctor">Doctor</option>
            <option value="admin">Admin</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>
The corresponding route in routes.py should handle the role:
text

Copy
@web.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        role = request.form.get('role')
        if User.query.filter_by(email=email).first():
            flash('Email already registered.', 'danger')
            return redirect(url_for('web.register'))
        user = User(email=email, role=role)
        user.set_password(password)
        db.session.add(user)
        db.session.commit()
        flash('Registration successful! Please log in.', 'success')
        return redirect(url_for('web.login'))
    return render_template('register.html')
Register the Admin User:
Navigate to the registration page (e.g., /register).
Fill in the form:
Email: admin@antidote.com
Password: Admin1234
Role: Select Admin
Submit the form to create the admin user.
Log In and Test:
Go to /login and log in with:
Email: admin@antidote.com
Password: Admin1234
Navigate to /admin/dashboard and verify access.
Option 2: Create an Admin User Directly in the Database
If the registration form doesn’t support admin role selection or you prefer a more direct method, you can add the admin user directly to the database.

Access the Database:
Since Antidote likely uses SQLAlchemy with Flask, you can use a Python shell to interact with the database.
Open a terminal in your Replit environment and start a Python shell:
text

Copy
python
Add the Admin User:
Run the following commands to create an admin user:
text

Copy
from app import app, db
from models import User
with app.app_context():
    admin = User(email='admin@antidote.com', role='admin')
    admin.set_password('Admin1234')
    db.session.add(admin)
    db.session.commit()
    print("Admin user created successfully!")
This assumes:
app.py contains the Flask app and database setup.
models.py defines the User model with email, role, and set_password method.
Example User model:
text

Copy
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    role = db.Column(db.String(20), nullable=False)  # e.g., 'patient', 'doctor', 'admin'

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)
Verify the User:
Still in the Python shell, confirm the user was added:
text

Copy
with app.app_context():
    user = User.query.filter_by(email='admin@antidote.com').first()
    print(user.email, user.role)
You should see: admin@antidote.com admin.
Log In and Test:
Go to /login and log in with:
Email: admin@antidote.com
Password: Admin1234
Navigate to /admin/dashboard and verify access.
Option 3: Seed the Database with an Admin User
If you need to create admin credentials programmatically (e.g., for deployment or testing), you can add a database seeding script.

Create a Seed Script (seed.py):
text

Copy
from app import app, db
from models import User

def seed_admin():
    with app.app_context():
        if not User.query.filter_by(email='admin@antidote.com').first():
            admin = User(email='admin@antidote.com', role='admin')
            admin.set_password('Admin1234')
            db.session.add(admin)
            db.session.commit()
            print("Admin user created successfully!")
        else:
            print("Admin user already exists.")

if __name__ == '__main__':
    seed_admin()
Run the Script:
In your Replit terminal:
text

Copy
python seed.py
Log In and Test:
Log in with admin@antidote.com and Admin1234 as described above.
Ensure Admin Dashboard Access Control
To prevent unauthorized access, ensure the Admin Dashboard routes are protected. Based on the implementation from the last conversation, the routes should already include this check:

text

Copy
@admin.route('/dashboard')
@login_required
def admin_dashboard():
    if not current_user.is_authenticated or current_user.role != 'admin':
        flash('Unauthorized access.', 'danger')
        return redirect(url_for('web.index'))
    # Rest of the code
If this check is missing, add it to all admin routes to ensure only users with role='admin' can access the Admin Dashboard.

Test and Verify
Log In as Admin:
Use the credentials admin@antidote.com and Admin1234.
Navigate to /admin/dashboard.
Check Access:
If the dashboard loads, the credentials are working.
If you see an "Unauthorized access" message, double-check the user’s role in the database:
text

Copy
with app.app_context():
    user = User.query.filter_by(email='admin@antidote.com').first()
    print(user.role)  # Should print 'admin'
Debug Issues:
If login fails, verify the password hashing in User.check_password.
If the dashboard doesn’t load, check Flask logs for routing errors.