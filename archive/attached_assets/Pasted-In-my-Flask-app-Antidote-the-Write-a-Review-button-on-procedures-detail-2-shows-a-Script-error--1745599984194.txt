In my Flask app Antidote, the "Write a Review" button on /procedures/detail/2 shows a 'Script error' in the console and doesn’t display the form, despite working on /doctors/detail/3. The button ID is writeReviewBtn, and reviews.js is included. Fix this issue:

1. Verify Bootstrap JS loading in base.html:
   - Open templates/base.html
   - Ensure Bootstrap JS is included in the <head> or before </body>:
     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
   - Confirm no duplicate script tags for Bootstrap or reviews.js.
   - Save the file.

2. Check modal definition in procedure_detail.html:
   - Open templates/procedure_detail.html
   - Verify the modal exists under {% block modals %}:
     <div class="modal fade" id="writeReviewModal" tabindex="-1" aria-labelledby="writeReviewModalLabel" aria-hidden="true">
         <div class="modal-dialog modal-lg">
             <div class="modal-content bg-dark text-white">
                 <div class="modal-header">
                     <h5 class="modal-title" id="writeReviewModalLabel">Write a Review for {{ procedure.procedure_name }}</h5>
                     <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                 </div>
                 <form id="writeReviewForm" action="{{ url_for('web.submit_review') }}" method="post">
                     <input type="hidden" name="procedure_id" value="{{ procedure.id }}">
                     <div class="mb-4">
                         <label class="form-label">Rating</label>
                         <div class="star-rating-container d-flex">
                             <div class="star-rating">
                                 {% for i in range(1, 6) %}
                                 <input type="radio" id="modalStar{{ i }}" name="rating" value="{{ i }}" required style="display: none;">
                                 <label for="modalStar{{ i }}" class="star-label mx-1" style="cursor: pointer;">
                                     <i class="far fa-star fa-2x text-warning"></i>
                                 </label>
                                 {% endfor %}
                             </div>
                         </div>
                     </div>
                     <div class="mb-3">
                         <label for="reviewComment" class="form-label">Your Review</label>
                         <textarea class="form-control bg-dark text-white" id="reviewComment" name="comment" rows="5" placeholder="Share your experience..."></textarea>
                     </div>
                     <div class="mb-3">
                         <label class="form-label">Doctor (Optional)</label>
                         <select class="form-select bg-dark text-white" name="doctor_id">
                             <option value="">Select the doctor</option>
                             {% for doctor in procedure_doctors %}
                             <option value="{{ doctor.id }}">Dr. {{ doctor.name }}</option>
                             {% endfor %}
                         </select>
                     </div>
                     <div class="modal-footer">
                         <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                         <button type="submit" class="btn btn-primary">Submit Review</button>
                     </div>
                 </form>
             </div>
         </div>
     </div>
   - Ensure the button in the Reviews tab has `id="writeReviewBtn"`:
     <button id="writeReviewBtn" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#writeReviewModal">Write a Review</button>
   - Save the file.

3. Debug the script error in reviews.js:
   - Open static/js/reviews.js
   - Ensure the event listener includes detailed error logging:
     document.addEventListener('DOMContentLoaded', function() {
         if (typeof bootstrap === 'undefined') {
             console.error('Bootstrap JS not loaded');
             return;
         }
         const writeReviewButtons = document.querySelectorAll('#writeReviewBtn, button[data-bs-target="#writeReviewModal"]');
         console.log('Found', writeReviewButtons.length, 'review buttons');
         writeReviewButtons.forEach(button => {
             button.addEventListener('click', function(e) {
                 e.preventDefault();
                 console.log('Write Review button clicked:', button.id);
                 try {
                     const modal = new bootstrap.Modal(document.getElementById('writeReviewModal'));
                     if (!modal) throw new Error('Modal object not created');
                     modal.show();
                 } catch (error) {
                     console.error('Modal error:', error.message, error.stack);
                 }
             });
         });
         const reviewForm = document.querySelector('#writeReviewForm');
         if (reviewForm) {
             reviewForm.addEventListener('submit', function(e) {
                 e.preventDefault();
                 const formData = new FormData(reviewForm);
                 fetch('/submit_review', {
                     method: 'POST',
                     body: formData,
                     headers: { 'X-Requested-With': 'XMLHttpRequest' }
                 })
                 .then(response => response.json())
                 .then(data => {
                     if (data.success) {
                         alert('Review submitted successfully!');
                         const modal = bootstrap.Modal.getInstance(document.getElementById('writeReviewModal'));
                         if (modal) modal.hide();
                         location.reload();
                     } else {
                         alert(data.message || 'Error submitting review.');
                     }
                 })
                 .catch(error => {
                     console.error('Review submission error:', error);
                     alert('An error occurred. Please try again.');
                 });
             });
         }
     });
   - Save the file.

4. Test the fix:
   - Restart the application:
     Restarted Start application
   - Log in as `testuser@antidote.com` with password "password123".
   - Go to /procedures/detail/2, click "Write a Review", confirm the modal appears.
   - Submit a review (rating 4, comment "Great procedure"), confirm the modal closes, and the review appears on the page.
   - Take a screenshot of /procedures/detail/2 post-submission.
   - Also, visit /doctors/detail/3, click "Write a Review", submit a review (rating 4, comment "Excellent service"), and take a screenshot to confirm consistency.

5. Check for errors:
   - F12 > Console and Network tabs on /procedures/detail/2 (screenshot if errors remain).
   - Run: tail -n 50 /tmp/replit-nix-errors.log and report issues.

6. Provide a summary:
   - Confirm if the modal appears and the review is submitted/visible on /procedures/detail/2.
   - Confirm consistency on /doctors/detail/3.
   - Include screenshots from step 4.
   - Note any errors from step 5.
   - Suggest next steps (e.g., link procedures to doctors, enhance UI).

Run this prompt and share the summary with screenshots. Let’s resolve the script error and get the procedure reviews working!