Test Patient Leads Action Buttons
Steps:
Log in as testdoctor@antidote.com (password: Doctor1234).
Navigate to the Patient Leads section (/dashboard/doctor/1/leads).
For the lead from "rambo" (ID: 13), test the "View," "Contact," and "Update Status" buttons.
Expected Behavior:
"View" should display the lead details (/lead/13/view).
"Contact" should show a message indicating the feature is under development.
"Update Status" should allow changing the lead status (e.g., from "pending" to "contacted") via AJAX.
Checkpoints:
Verify static/js/leads.js is handling the button clicks:
text

Copy
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.lead-action-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const leadId = this.dataset.leadId;
            const action = this.dataset.action;
            if (action === 'view') {
                window.location.href = `/lead/${leadId}/view`;
            } else if (action === 'contact') {
                window.location.href = `/lead/${leadId}/contact`;
            } else if (action === 'update_status') {
                window.location.href = `/lead/${leadId}/update_status`;
            }
        });
    });

    document.querySelectorAll('.update-lead-status-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const leadId = this.dataset.leadId;
            const formData = new FormData(this);
            fetch(`/lead/${leadId}/update_status`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Lead status updated successfully!');
                    window.location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the lead status.');
            });
        });
    });
});
Ensure doctor_leads.html includes the script and has the correct data attributes:
text

Copy
<td>
    <a href="{{ url_for('web.view_lead', lead_id=lead.id) }}" class="btn btn-outline-primary btn-sm lead-action-btn" data-lead-id="{{ lead.id }}" data-action="view">View</a>
    <a href="{{ url_for('web.contact_lead', lead_id=lead.id) }}" class="btn btn-outline-primary btn-sm lead-action-btn" data-lead-id="{{ lead.id }}" data-action="contact">Contact</a>
    <a href="{{ url_for('web.update_lead_status', lead_id=lead.id) }}" class="btn btn-outline-primary btn-sm lead-action-btn" data-lead-id="{{ lead.id }}" data-action="update_status">Update Status</a>
</td>
<script src="{{ url_for('static', filename='js/leads.js') }}"></script>
Check the browser console and Flask logs for errors during these actions.
Test Review Reply Functionality
Steps:
Log in as testdoctor@antidote.com.
Navigate to the Reviews section (/dashboard/doctor/1/reviews).
Reply to the review from testuser.
Expected Behavior:
The reply form should submit via AJAX, and the reply should appear below the review without a page reload.
Checkpoints:
Verify static/js/reviews.js:
text

Copy
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.reply-review-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const reviewId = this.dataset.reviewId;
            const formData = new FormData(this);
            fetch(`/reply_review/${reviewId}`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Reply submitted successfully!');
                    window.location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while submitting the reply.');
            });
        });
    });
});
Ensure doctor_reviews.html includes the script and has the correct form setup:
text

Copy
<form method="POST" action="{{ url_for('web.reply_review', review_id=review.id) }}" class="reply-review-form" data-review-id="{{ review.id }}">
    {{ form.hidden_tag() }}
    <div class="mb-3">
        <label for="reply_text" class="form-label">Your Reply</label>
        {{ form.reply_text(class="form-control", rows="3") }}
    </div>
    {{ form.submit(class="btn btn-primary") }}
</form>
<script src="{{ url_for('static', filename='js/reviews.js') }}"></script>
Check the browser console and Flask logs for errors.
Test Appointment Management
Steps:
Log in as testuser@antidote.com (password: Test1234).
Book an appointment with Dr. John Smith (e.g., Procedure: Facelift, Date: 2025-05-01, Time: 10:00).
Log in as testdoctor@antidote.com and navigate to the Appointments section (/dashboard/doctor/1/appointments).
Update the appointment status (e.g., to "confirmed").
Expected Behavior:
The appointment should appear under "Upcoming Appointments."
The status update should occur via AJAX without a page reload.
Checkpoints:
Verify static/js/appointments.js:
text

Copy
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.update-appointment-status').forEach(select => {
        select.addEventListener('change', function(e) {
            const appointmentId = this.dataset.appointmentId;
            const newStatus = this.value;
            const formData = new FormData();
            formData.append('status', newStatus);
            formData.append('csrf_token', document.querySelector('input[name="csrf_token"]').value);
            fetch(`/appointment/${appointmentId}/update_status`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Appointment status updated successfully!');
                    window.location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the appointment status.');
            });
        });
    });
});
Ensure doctor_appointments.html includes the script:
text

Copy
<td>
    <form class="update-appointment-form">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
        <select name="status" class="update-appointment-status" data-appointment-id="{{ appointment.id }}">
            <option value="pending" {% if appointment.status == 'pending' %}selected{% endif %}>Pending</option>
            <option value="confirmed" {% if appointment.status == 'confirmed' %}selected{% endif %}>Confirmed</option>
            <option value="cancelled" {% if appointment.status == 'cancelled' %}selected{% endif %}>Cancelled</option>
        </select>
    </form>
</td>
<script src="{{ url_for('static', filename='js/appointments.js') }}"></script>
Check the browser console and Flask logs for errors.
2. Address Remaining Issues
Verify Registration Page Accessibility
Steps:
Navigate to the login page (https://a7d8e18d-c89f-4c40-94c7-8e3a16685f66-00-18bfagwki294d.pike.replit.dev/login).
Click "Sign up here" and confirm the registration form loads with fields for email, name, and password.
Register a new user (e.g., email: newuser@antidote.com, name: New User, password: NewPass123).
Expected Behavior:
The form should load, and registration should succeed with a redirect to the login page.
Fix if Needed:
Ensure the register route in routes.py exists:
text

Copy
@web.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('web.index'))
    if request.method == 'POST':
        email = request.form.get('email')
        name = request.form.get('name')
        password = request.form.get('password')
        role = request.form.get('role', 'user')
        user = User.query.filter_by(email=email).first()
        if user:
            flash('Email already exists.', 'danger')
            return redirect(url_for('web.register'))
        user = User(email=email, name=name, role=role)
        user.set_password(password)
        db.session.add(user)
        db.session.commit()
        if role == 'doctor':
            doctor = Doctor(user_id=user.id, name=name)
            db.session.add(doctor)
            db.session.commit()
        flash('Registration successful! Please log in.', 'success')
        return redirect(url_for('web.login'))
    return render_template('register.html')
Verify templates/register.html exists:
text

Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register - Antidote</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Register</h2>
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <form method="POST" action="{{ url_for('web.register') }}">
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" name="email" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" name="name" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" name="password" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="role" class="form-label">Role</label>
                <select name="role" class="form-control">
                    <option value="user">Patient</option>
                    <option value="doctor">Doctor</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
        <p class="mt-3">Already have an account? <a href="{{ url_for('web.login') }}">Log in here</a></p>
    </div>
</body>
</html>
Check the browser console and Flask logs for errors.
Fix "Answer as Doctor" in Community
Steps:
Add the doctor_community route in routes.py:
text

Copy
@web.route('/dashboard/doctor/<int:doctor_id>/community')
@login_required
def doctor_community(doctor_id):
    if current_user.role != 'doctor':
        flash('Unauthorized access. Only doctors can access this dashboard.', 'danger')
        return redirect(url_for('web.index'))
    doctor = Doctor.query.get_or_404(doctor_id)
    if doctor.user_id != current_user.id:
        flash('Unauthorized access. You can only view your own dashboard.', 'danger')
        return redirect(url_for('web.index'))
    threads = Community.query.order_by(Community.created_at.desc()).limit(5).all()
    return render_template('doctor_community.html', doctor=doctor, threads=threads)
Create templates/doctor_community.html:
text

Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Community - {{ doctor.name }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-3">
                <h4>Doctor Profile</h4>
                <p>{{ doctor.name }}</p>
                <p>★ {{ doctor.rating }} ({{ doctor.review_count }} reviews)</p>
                <a href="{{ url_for('web.edit_doctor_profile', doctor_id=doctor.id) }}" class="btn btn-outline-primary">Edit Profile</a>

                <h4 class="mt-4">Dashboard Menu</h4>
                <ul class="list-group">
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_dashboard', doctor_id=doctor.id) }}">Overview</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_appointments', doctor_id=doctor.id) }}">Appointments</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_leads', doctor_id=doctor.id) }}">Patient Leads</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_reviews', doctor_id=doctor.id) }}">Reviews</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_procedures', doctor_id=doctor.id) }}">My Procedures</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_availability', doctor_id=doctor.id) }}">Availability</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_gallery', doctor_id=doctor.id) }}">Gallery</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_community', doctor_id=doctor.id) }}">Community</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_verification', doctor_id=doctor.id) }}">Verification <span class="badge bg-warning">NEW</span></a></li>
                </ul>
            </div>
            <div class="col-md-9">
                <h3>Community Engagement</h3>
                <div class="alert alert-info">
                    Engaging with the community as a doctor helps build trust and establish you as an authority in your field.
                </div>
                <h5>Recent Threads in Your Specialties</h5>
                <a href="{{ url_for('web.community') }}" class="btn btn-outline-primary mb-3">View All Threads</a>
                {% if threads %}
                    <ul class="list-group">
                        {% for thread in threads %}
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <a href="{{ url_for('web.community_thread', thread_id=thread.id) }}">{{ thread.title }}</a>
                                <a href="{{ url_for('web.reply_to_thread', thread_id=thread.id) }}" class="btn btn-outline-primary btn-sm reply-thread-btn" data-thread-id="{{ thread.id }}">Answer as Doctor</a>
                            </li>
                        {% endfor %}
                    </ul>
                {% else %}
                    <p>No recent community threads in your specialties</p>
                {% endif %}
            </div>
        </div>
    </div>
    <script src="{{ url_for('static', filename='js/community.js') }}"></script>
</body>
</html>
Add the reply_to_thread route in routes.py:
text

Copy
@web.route('/community/thread/<int:thread_id>/reply', methods=['GET', 'POST'])
@login_required
def reply_to_thread(thread_id):
    if current_user.role != 'doctor':
        flash('Unauthorized access. Only doctors can reply to community threads.', 'danger')
        return redirect(url_for('web.community'))
    thread = Community.query.get_or_404(thread_id)
    doctor = Doctor.query.filter_by(user_id=current_user.id).first()
    if request.method == 'POST':
        reply_content = request.form.get('reply_content')
        if not reply_content:
            flash('Reply cannot be empty.', 'danger')
            return redirect(url_for('web.community_thread', thread_id=thread.id))
        reply = CommunityReply(
            thread_id=thread.id,
            user_id=current_user.id,
            content=reply_content,
            is_doctor_reply=True
        )
        db.session.add(reply)
        db.session.commit()
        flash('Reply posted successfully!', 'success')
        return redirect(url_for('web.community_thread', thread_id=thread.id))
    return render_template('community_reply.html', thread=thread, doctor=doctor)
Create templates/community_reply.html:
text

Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Reply to Thread - {{ thread.title }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Reply to Thread: {{ thread.title }}</h2>
        <form method="POST" action="{{ url_for('web.reply_to_thread', thread_id=thread.id) }}" class="reply-thread-form" data-thread-id="{{ thread.id }}">
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
            <div class="mb-3">
                <label for="reply_content" class="form-label">Your Reply (as Doctor)</label>
                <textarea name="reply_content" class="form-control" rows="5" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit Reply</button>
        </form>
        <a href="{{ url_for('web.community_thread', thread_id=thread.id) }}" class="btn btn-secondary">Cancel</a>
    </div>
    <script src="{{ url_for('static', filename='js/community.js') }}"></script>
</body>
</html>
Create static/js/community.js:
text

Copy
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.reply-thread-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const threadId = this.dataset.threadId;
            const formData = new FormData(this);
            fetch(`/community/thread/${threadId}/reply`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Reply posted successfully!');
                    window.location.href = `/community/thread/${threadId}`;
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while posting the reply.');
            });
        });
    });
});
Test by logging in as testdoctor@antidote.com, navigating to the Community section (/dashboard/doctor/1/community), and replying to the thread "hair is great" (thread ID: 2).
Fix Other Action Buttons (Edit Profile, Procedure Management)
Edit Profile:
Add the edit_doctor_profile route in routes.py:
text

Copy
@web.route('/dashboard/doctor/<int:doctor_id>/edit_profile', methods=['GET', 'POST'])
@login_required
def edit_doctor_profile(doctor_id):
    if current_user.role != 'doctor':
        flash('Unauthorized access. Only doctors can access this.', 'danger')
        return redirect(url_for('web.index'))
    doctor = Doctor.query.get_or_404(doctor_id)
    if doctor.user_id != current_user.id:
        flash('Unauthorized access.', 'danger')
        return redirect(url_for('web.index'))
    if request.method == 'POST':
        doctor.name = request.form.get('name')
        doctor.specialty = request.form.get('specialty')
        doctor.experience = request.form.get('experience')
        doctor.city = request.form.get('city')
        doctor.state = request.form.get('state')
        doctor.hospital = request.form.get('hospital')
        doctor.consultation_fee = request.form.get('consultation_fee')
        doctor.bio = request.form.get('bio')
        db.session.commit()
        flash('Profile updated successfully!', 'success')
        return redirect(url_for('web.doctor_dashboard', doctor_id=doctor.id))
    return render_template('edit_doctor_profile.html', doctor=doctor)
Create templates/edit_doctor_profile.html:
text

Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Edit Profile - {{ doctor.name }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Edit Profile</h2>
        <form method="POST" action="{{ url_for('web.edit_doctor_profile', doctor_id=doctor.id) }}">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" name="name" class="form-control" value="{{ doctor.name }}" required>
            </div>
            <div class="mb-3">
                <label for="specialty" class="form-label">Specialty</label>
                <input type="text" name="specialty" class="form-control" value="{{ doctor.specialty }}">
            </div>
            <div class="mb-3">
                <label for="experience" class="form-label">Experience (Years)</label>
                <input type="number" name="experience" class="form-control" value="{{ doctor.experience }}">
            </div>
            <div class="mb-3">
                <label for="city" class="form-label">City</label>
                <input type="text" name="city" class="form-control" value="{{ doctor.city }}">
            </div>
            <div class="mb-3">
                <label for="state" class="form-label">State</label>
                <input type="text" name="state" class="form-control" value="{{ doctor.state }}">
            </div>
            <div class="mb-3">
                <label for="hospital" class="form-label">Hospital</label>
                <input type="text" name="hospital" class="form-control" value="{{ doctor.hospital }}">
            </div>
            <div class="mb-3">
                <label for="consultation_fee" class="form-label">Consultation Fee</label>
                <input type="number" step="0.01" name="consultation_fee" class="form-control" value="{{ doctor.consultation_fee }}">
            </div>
            <div class="mb-3">
                <label for="bio" class="form-label">Bio</label>
                <textarea name="bio" class="form-control" rows="5">{{ doctor.bio }}</textarea>
            </div>
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </form>
        <a href="{{ url_for('web.doctor_dashboard', doctor_id=doctor.id) }}" class="btn btn-secondary">Cancel</a>
    </div>
</body>
</html>
Procedure Management:
Add the doctor_procedures route in routes.py:
text

Copy
@web.route('/dashboard/doctor/<int:doctor_id>/procedures')
@login_required
def doctor_procedures(doctor_id):
    if current_user.role != 'doctor':
        flash('Unauthorized access. Only doctors can access this dashboard.', 'danger')
        return redirect(url_for('web.index'))
    doctor = Doctor.query.get_or_404(doctor_id)
    if doctor.user_id != current_user.id:
        flash('Unauthorized access. You can only view your own dashboard.', 'danger')
        return redirect(url_for('web.index'))
    procedures = Procedure.query.join(DoctorProcedure).filter(DoctorProcedure.doctor_id == doctor.id).all()
    return render_template('doctor_procedures.html', doctor=doctor, procedures=procedures)
Create templates/doctor_procedures.html:
text

Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>My Procedures - {{ doctor.name }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-3">
                <h4>Doctor Profile</h4>
                <p>{{ doctor.name }}</p>
                <p>★ {{ doctor.rating }} ({{ doctor.review_count }} reviews)</p>
                <a href="{{ url_for('web.edit_doctor_profile', doctor_id=doctor.id) }}" class="btn btn-outline-primary">Edit Profile</a>

                <h4 class="mt-4">Dashboard Menu</h4>
                <ul class="list-group">
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_dashboard', doctor_id=doctor.id) }}">Overview</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_appointments', doctor_id=doctor.id) }}">Appointments</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_leads', doctor_id=doctor.id) }}">Patient Leads</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_reviews', doctor_id=doctor.id) }}">Reviews</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_procedures', doctor_id=doctor.id) }}">My Procedures</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_availability', doctor_id=doctor.id) }}">Availability</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_gallery', doctor_id=doctor.id) }}">Gallery</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_community', doctor_id=doctor.id) }}">Community</a></li>
                    <li class="list-group-item"><a href="{{ url_for('web.doctor_verification', doctor_id=doctor.id) }}">Verification <span class="badge bg-warning">NEW</span></a></li>
                </ul>
            </div>
            <div class="col-md-9">
                <h3>My Procedures</h3>
                <a href="{{ url_for('web.add_procedure', doctor_id=doctor.id) }}" class="btn btn-outline-primary mb-3">Add Procedure</a>
                {% if procedures %}
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Procedure</th>
                                <th>Category</th>
                                <th>Price Range</th>
                                <th>Rating</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for procedure in procedures %}
                                <tr>
                                    <td>{{ procedure.name }}</td>
                                    <td>{{ procedure.category }}</td>
                                    <td>${{ procedure.price_min }} - ${{ procedure.price_max }}</td>
                                    <td>★ {{ procedure.rating }} ({{ procedure.review_count }})</td>
                                    <td>
                                        <a href="{{ url_for('web.procedure_details', procedure_id=procedure.id) }}" class="btn btn-outline-primary btn-sm">Details</a>
                                        <a href="{{ url_for('web.remove_procedure', procedure_id=procedure.id, doctor_id=doctor.id) }}" class="btn btn-outline-danger btn-sm">Remove</a>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>No procedures added yet</p>
                {% endif %}
            </div>
        </div>
    </div>
</body>
</html>
Add the necessary routes in routes.py:
text

Copy
@web.route('/dashboard/doctor/<int:doctor_id>/add_procedure', methods=['GET', 'POST'])
@login_required
def add_procedure(doctor_id):
    if current_user.role != 'doctor':
        flash('Unauthorized access. Only doctors can access this.', 'danger')
        return redirect(url_for('web.index'))
    doctor = Doctor.query.get_or_404(doctor_id)
    if doctor.user_id != current_user.id:
        flash('Unauthorized access.', 'danger')
        return redirect(url_for('web.index'))
    if request.method == 'POST':
        procedure_name = request.form.get('procedure_name')
        category = request.form.get('category')
        price_min = request.form.get('price_min')
        price_max = request.form.get('price_max')
        procedure = Procedure(
            name=procedure_name,
            category=category,
            price_min=price_min,
            price_max=price_max,
            rating=0,
            review_count=0
        )
        db.session.add(procedure)
        db.session.commit()
        doctor_procedure = DoctorProcedure(doctor_id=doctor.id, procedure_id=procedure.id)
        db.session.add(doctor_procedure)
        db.session.commit()
        flash('Procedure added successfully!', 'success')
        return redirect(url_for('web.doctor_procedures', doctor_id=doctor.id))
    return render_template('add_procedure.html', doctor=doctor)

@web.route('/procedure/<int:procedure_id>/details')
@login_required
def procedure_details(procedure_id):
    procedure = Procedure.query.get_or_404(procedure_id)
    doctor = Doctor.query.filter_by(user_id=current_user.id).first()
    if not doctor:
        flash('Unauthorized access.', 'danger')
        return redirect(url_for('web.index'))
    return render_template('procedure_details.html', procedure=procedure, doctor=doctor)

@web.route('/dashboard/doctor/<int:doctor_id>/remove_procedure/<int:procedure_id>')
@login_required
def remove_procedure(doctor_id, procedure_id):
    if current_user.role != 'doctor':
        flash('Unauthorized access. Only doctors can access this.', 'danger')
        return redirect(url_for('web.index'))
    doctor = Doctor.query.get_or_404(doctor_id)
    if doctor.user_id != current_user.id:
        flash('Unauthorized access.', 'danger')
        return redirect(url_for('web.index'))
    doctor_procedure = DoctorProcedure.query.filter_by(doctor_id=doctor.id, procedure_id=procedure_id).first()
    if doctor_procedure:
        db.session.delete(doctor_procedure)
        db.session.commit()
        flash('Procedure removed successfully!', 'success')
    return redirect(url_for('web.doctor_procedures', doctor_id=doctor.id))
Create templates/add_procedure.html:
text

Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Add Procedure - {{ doctor.name }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Add Procedure</h2>
        <form method="POST" action="{{ url_for('web.add_procedure', doctor_id=doctor.id) }}">
            <div class="mb-3">
                <label for="procedure_name" class="form-label">Procedure Name</label>
                <input type="text" name="procedure_name" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <input type="text" name="category" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="price_min" class="form-label">Price Range (Min)</label>
                <input type="number" name="price_min" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="price_max" class="form-label">Price Range (Max)</label>
                <input type="number" name="price_max" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary">Add Procedure</button>
        </form>
        <a href="{{ url_for('web.doctor_procedures', doctor_id=doctor.id) }}" class="btn btn-secondary">Cancel</a>
    </div>
</body>
</html>
Create templates/procedure_details.html:
text

Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Procedure Details - {{ procedure.name }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Procedure Details</h2>
        <p><strong>Name:</strong> {{ procedure.name }}</p>
        <p><strong>Category:</strong> {{ procedure.category }}</p>
        <p><strong>Price Range:</strong> ${{ procedure.price_min }} - ${{ procedure.price_max }}</p>
        <p><strong>Rating:</strong> ★ {{ procedure.rating }} ({{ procedure.review_count }} reviews)</p>
        <a href="{{ url_for('web.doctor_procedures', doctor_id=doctor.id) }}" class="btn btn-primary">Back to Procedures</a>
    </div>
</body>
</html>
Test by logging in as testdoctor@antidote.com, navigating to the My Procedures section (/dashboard/doctor/1/procedures), adding a procedure, viewing its details, and removing it.
3. Deployment and Final Testing
Update Dependencies:
Run:
text

Copy
pip freeze > requirements.txt
Deploy on Replit:
Click the "Deploy" button in Replit and follow the prompts.
Final Testing:
Registration: Register a new user (newuser@antidote.com).
Appointments: Book an appointment as testuser and confirm it appears in Dr. John Smith’s dashboard.
Patient Leads: Test all action buttons for the lead from "rambo."
Reviews: Reply to the review from testuser.
Community: Reply to the thread "hair is great" as a doctor.
My Procedures: Add a new procedure, view its details, and remove it.
Check Logs:
Monitor Flask logs and the browser console for errors during testing.