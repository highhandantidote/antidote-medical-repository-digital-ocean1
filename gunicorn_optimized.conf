Optimized Gunicorn Configuration:
==================================================
# Optimized Gunicorn configuration for production deployment
# Auto-generated for antidote.fit performance optimization

# Worker configuration - optimized for production load
workers = 8  # 8 cores detected
threads = 4
worker_class = 'sync'
worker_connections = 1000
max_requests = 2000
max_requests_jitter = 200

# Timeout configuration - optimized for database queries
timeout = 120
keepalive = 5
graceful_timeout = 60

# Server socket
bind = '0.0.0.0:5000'
backlog = 2048

# Performance optimizations
preload_app = True
worker_tmp_dir = '/dev/shm'

# Memory management
max_worker_memory = 314572800

# Logging (minimal for performance)
accesslog = '-'
errorlog = '-'
access_log_format = '%(h)s "%(r)s" %(s)s %(b)s %(D)s'
loglevel = 'warning'

# Security limits
limit_request_line = 8192
limit_request_fields = 200
limit_request_field_size = 8192

# Production startup hook
def on_starting(server):
    server.log.info("ðŸš€ Starting antidote.fit production server")
    server.log.info(f"Workers: 8, Threads: 4")

def on_reload(server):
    server.log.info("ðŸ”„ Reloading antidote.fit production server")

def worker_int(worker):
    worker.log.info("ðŸ”„ Worker received INT or QUIT signal")

# Performance monitoring
def pre_request(worker, req):
    worker.log.debug(f"Processing: {req.method} {req.path}")

def post_request(worker, req, environ, resp):
    # Log slow requests only
    if hasattr(req, '_start_time'):
        duration = time.time() - req._start_time
        if duration > 2.0:  # Log requests taking more than 2 seconds
            worker.log.warning(f"SLOW: {req.method} {req.path} took {duration:.2f}s")

