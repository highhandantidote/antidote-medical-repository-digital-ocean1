"""
Fix CSS Bundle System - Complete CSS File Inclusion
This script rebuilds the CSS bundles to include ALL CSS files that are loaded in base.html
"""
import os
import gzip
import shutil
from pathlib import Path

def get_all_css_files_from_base_html():
    """Extract all CSS files referenced in base.html"""
    css_files = [
        # Core framework CSS
        "modern.css",
        "style.css", 
        "light-theme.css",
        "typography-optimization.css",
        
        # Mobile CSS
        "unified-mobile.css",
        "mobile-borderless.css",
        "mobile-bottom-nav.css",
        "mobile-nav-fix.css",
        "mobile-search-compact.css",
        "mobile-horizontal-fix.css",
        "mobile-logo-hide.css",
        "clinic-directory-mobile.css",
        
        # Component CSS
        "banner-slider.css",
        "navbar-autocomplete.css",
        "search-dropdown-fix.css",
        "search-placeholder.css",
        "tab-underline.css",
        "thread-suggestions.css",
        "custom-gradients.css",
        
        # Specific fixes and features
        "comma-fixes.css",
        "search-fixes.css",
        "comma-emergency-fix.css",
        "remove-available-badge.css",
        "desktop-optimization.css",
        "footer-hide.css"
    ]
    return css_files

def rebuild_css_bundles():
    """Rebuild CSS bundles with ALL files from base.html"""
    static_dir = Path("static")
    css_dir = static_dir / "css"
    optimized_dir = static_dir / "optimized"
    optimized_dir.mkdir(exist_ok=True)
    
    print("üîß Rebuilding CSS bundles with complete file inclusion...")
    
    # Get all CSS files
    all_css_files = get_all_css_files_from_base_html()
    
    # Define comprehensive CSS groups
    critical_css_files = [
        "modern.css",
        "style.css", 
        "light-theme.css",
        "typography-optimization.css",
        "desktop-optimization.css",
        "banner-slider.css",  # Critical for hero banner
        "remove-available-badge.css",
        "footer-hide.css"
    ]
    
    mobile_css_files = [
        "unified-mobile.css",
        "mobile-bottom-nav.css",
        "mobile-nav-fix.css",
        "mobile-search-compact.css",
        "mobile-borderless.css",
        "mobile-horizontal-fix.css",
        "mobile-logo-hide.css",
        "clinic-directory-mobile.css"
    ]
    
    component_css_files = [
        "navbar-autocomplete.css",
        "search-dropdown-fix.css",
        "search-placeholder.css",
        "tab-underline.css",
        "thread-suggestions.css",
        "custom-gradients.css",
        "comma-fixes.css",
        "search-fixes.css",
        "comma-emergency-fix.css"
    ]
    
    # Create bundles
    create_bundle("critical", critical_css_files, css_dir, optimized_dir)
    create_bundle("mobile", mobile_css_files, css_dir, optimized_dir)
    create_bundle("components", component_css_files, css_dir, optimized_dir)
    
    print("‚úÖ CSS bundles rebuilt successfully with all necessary files")
    
    # Verify all files were included
    verify_bundle_completeness(all_css_files, critical_css_files + mobile_css_files + component_css_files)

def create_bundle(name, files, css_dir, optimized_dir):
    """Create a single CSS bundle from multiple files"""
    bundle_content = f"/* {name.title()} CSS Bundle - Generated by Fixed Performance Optimizer */\n\n"
    
    included_files = []
    missing_files = []
    
    for file in files:
        file_path = css_dir / file
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    bundle_content += f"/* === {file} === */\n"
                    bundle_content += content + "\n\n"
                    included_files.append(file)
            except Exception as e:
                print(f"‚ö†Ô∏è Warning: Could not read {file}: {e}")
                missing_files.append(file)
        else:
            missing_files.append(file)
    
    # Write bundle
    bundle_path = optimized_dir / f"{name}-bundle.css"
    with open(bundle_path, 'w', encoding='utf-8') as f:
        f.write(bundle_content)
        
    # Create compressed version
    create_gzip_version(bundle_path)
    
    # Get file sizes
    original_size = get_file_size(bundle_path)
    compressed_size = get_file_size(Path(f"{bundle_path}.gz"))
    
    print(f"‚úÖ Created {name} bundle: {original_size} (compressed: {compressed_size})")
    print(f"   üì¶ Included {len(included_files)} files: {', '.join(included_files)}")
    
    if missing_files:
        print(f"   ‚ö†Ô∏è Missing {len(missing_files)} files: {', '.join(missing_files)}")

def create_gzip_version(file_path):
    """Create gzipped version of file"""
    with open(file_path, 'rb') as f_in:
        with gzip.open(f"{file_path}.gz", 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)

def get_file_size(file_path):
    """Get human readable file size"""
    size = file_path.stat().st_size
    for unit in ['B', 'KB', 'MB']:
        if size < 1024:
            return f"{size:.1f} {unit}"
        size /= 1024
    return f"{size:.1f} GB"

def verify_bundle_completeness(all_files, bundled_files):
    """Verify that all CSS files from base.html are included in bundles"""
    missing_from_bundles = set(all_files) - set(bundled_files)
    
    if missing_from_bundles:
        print(f"‚ùå Missing from bundles: {', '.join(missing_from_bundles)}")
    else:
        print("‚úÖ All CSS files from base.html are included in bundles!")

if __name__ == "__main__":
    rebuild_css_bundles()